{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst firebaseKey = process.env.REACT_APP_FIREBASE_KEY;\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyDvWnceRnxNUpGeCOAWqdrPoQuvLMIBNWI\",\n  authDomain: \"react-udemy-2ed62.firebaseapp.com\",\n  databaseURL: \"https://react-udemy-2ed62.firebaseio.com\",\n  projectId: \"react-udemy-2ed62\",\n  storageBucket: \"react-udemy-2ed62.appspot.com\",\n  messagingSenderId: \"781792002675\",\n  appId: \"1:781792002675:web:59629076c57f2b560c6006\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithRedirect(googleProvider);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport default firebase;","map":{"version":3,"sources":["/home/node/app/client/src/firebase/firebase.utils.js"],"names":["firebase","firebaseKey","process","env","REACT_APP_FIREBASE_KEY","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","firestore","collection","batch","forEach","obj","newDocRef","doc","set","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithRedirect","createUserProfileDocument","additionalData","userRef","uid","snapShot","get","exists","displayName","email","createdAt","Date","error","console","log","message"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst  firebaseKey = process.env.REACT_APP_FIREBASE_KEY; \n\nexport  const firebaseConfig = {\n        apiKey: \"AIzaSyDvWnceRnxNUpGeCOAWqdrPoQuvLMIBNWI\",\n        authDomain: \"react-udemy-2ed62.firebaseapp.com\",\n        databaseURL: \"https://react-udemy-2ed62.firebaseio.com\",\n        projectId: \"react-udemy-2ed62\",\n        storageBucket: \"react-udemy-2ed62.appspot.com\",\n        messagingSenderId: \"781792002675\",\n        appId: \"1:781792002675:web:59629076c57f2b560c6006\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithRedirect(googleProvider);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email  } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      \n          });\n    \n    } catch (error) {\n      console.log('error creating user', error.message);\n    \n    }\n  \n  }\n\n  return userRef;\n\n};\n\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}